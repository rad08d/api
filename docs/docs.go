// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2018-10-16 20:47:18.806899686 -0500 CDT m=+0.051512428

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "This is a simple rate calculator.",
        "title": "Simple Rate Calculator",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Alan",
            "url": "http://www.implauzable.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/search": {
            "post": {
                "description": "Search for available times",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "This endpoint provides the ability to specify a time range, JSON file of rates, and get a price for that time range. ",
                "operationId": "file.upload",
                "parameters": [
                    {
                        "type": "JSON object",
                        "description": "This is a JSON representation of a collection of rates and times",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "example": {
                            "rates": [
                              {
                                "days": "mon,tues,wed,thurs,fri",
                                "times": "0600-1800",
                                "price": 1500
                              },
                              {
                                "days": "sat,sun",
                                "times": "0600-2000",
                                "price": 2000
                              }
                            ]
                          }
                        }
                    },
                    {
                        "description": "The start time of the requested time slot",
                        "name": "startTime",
                        "in": "query",
                        "required": true,
                        "type": "string",
                        "schema": {
                            "example": "2015-07-01T07:00:00Z"
                        }
                    },
                    {
                        "description": "The end time of the requtested time slot ",
                        "name": "endTime",
                        "in": "query",
                        "required": true,
                        "type": "string",
                        "schema": {
                            "example": "2015-07-01T12:00:00Z"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "JSON input is incorrect",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "get if the REST API is up",
                "consumes": [
                ],
                "produces": [
                    "application/text"
                ],
                "operationId": "get-health",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
